name: Release

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Release
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: quiz_app

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.6'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Decode and place google-services.json
      - name: Set up google-services.json
        run: |
          mkdir -p android/app
          echo "${GOOGLE_SERVICES_JSON}" > android/app/google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}

      # Analyze the code
      #      - name: Analyze code
      #        run: flutter analyze

      # Run tests
      #      - name: Run tests
      #        run: flutter test

      # (Optional) Build APK for Android
      - name: Build APK
        run: flutter build apk --release

      # (Optional) Build for iOS (only works on macOS runners)
      # - name: Build iOS
      #   if: runner.os == 'macOS'
      #   run: flutter build ios --no-codesign


  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release-files

      - name: Extract version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(grep '^version:' quiz_app/pubspec.yaml | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create or update release tag
        run: |
          TAG="${{ steps.get_version.outputs.version }}"
          git tag -f "$TAG"
          git push origin "$TAG" --force

      - name: Extract release notes
        id: extract_notes
        run: |
          PR_BODY="${{ steps.pr.outputs.body }}"
          NOTES=$(echo "$PR_BODY" | sed -n '/## Release Notes/,/## /p' | sed '1d;$d' || true)
          [ -z "$NOTES" ] && NOTES="No release notes provided."
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: "v${{ steps.get_version.outputs.version }}"
          body: |
            ## Release Notes
            ${{ steps.extract_notes.outputs.notes }}
          files: |
            release-files/app-release-v${{ steps.get_version.outputs.version }}.apk
            release-files/release-artifacts-v${{ steps.get_version.outputs.version }}.zip
            release-files/release-artifacts-v${{ steps.get_version.outputs.version }}.tar.gz