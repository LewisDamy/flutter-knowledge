name: Flutter CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: quiz_app

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.6'

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Decode and place google-services.json
      - name: Set up google-services.json
        run: |
          mkdir -p android/app
          echo "${GOOGLE_SERVICES_JSON}" > android/app/google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}

      # Analyze the code
      - name: Analyze code
        run: flutter analyze

      # Run tests
      - name: Run tests
        run: flutter test

      # (Optional) Build APK for Android
      - name: Build APK
        run: flutter build apk --release

      # (Optional) Build for iOS (only works on macOS runners)
      # - name: Build iOS
      #   if: runner.os == 'macOS'
      #   run: flutter build ios --no-codesign

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release-files

      - name: Extract version from pubspect.yaml
        id: get_version
        run: |
          VERSION=$(grep '^version:' quiz_app/pubspec.yaml | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create or update release tag
        run: |
          TAG="${{ steps.get_version.outputs.version }}"
          git tag -f "$TAG"
          git push origin "$TAG" --force

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: "v${{ steps.get_version.outputs.version }}"
          body: "Automated release generated from pubspec.yaml"
          files: |
            release-files/app-release.apk
            release-files/release-artifacts.zip
            release-files/release-artifacts.tar.gz

